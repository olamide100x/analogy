import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Share2, Twitter, Linkedin, Sparkles, Zap } from 'lucide-react';
import { toast } from 'sonner';
import arcadeLogo from '@/assets/arcade-logo.jpg';

const AnalogyGenerator = () => {
  const [thing1, setThing1] = useState('');
  const [thing2, setThing2] = useState('');
  const [generatedAnalogy, setGeneratedAnalogy] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [email, setEmail] = useState('');

  const handleGenerate = async () => {
    if (!thing1.trim() || !thing2.trim()) {
      toast.error('Please enter both concepts to compare!');
      return;
    }

    setIsGenerating(true);
    
    // Simulate API call - user will need Supabase integration for real OpenAI functionality
    setTimeout(() => {
      const analogies = [
        `Comparing ${thing1} to ${thing2} is like comparing a vintage arcade cabinet to a modern gaming console - both serve the same fundamental purpose of entertainment, but one carries the nostalgic weight of simpler times while the other represents the sleek efficiency of progress.`,
        `${thing1} and ${thing2} are like two different levels in the same video game - they might look completely different and require different strategies, but they're both part of the same epic journey toward mastery.`,
        `The relationship between ${thing1} and ${thing2} is like the difference between 8-bit and 16-bit graphics - one might seem more primitive, but both create immersive worlds that capture our imagination in their own unique ways.`,
        `${thing1} versus ${thing2} is like choosing between a classic Pac-Man and modern Fortnite - different eras, different styles, but both create that addictive 'just one more try' feeling that keeps us coming back.`
      ];
      
      const randomAnalogy = analogies[Math.floor(Math.random() * analogies.length)];
      setGeneratedAnalogy(randomAnalogy);
      setIsGenerating(false);
      toast.success('Analogy generated! ðŸŽ®');
    }, 2000);
  };

  const shareToTwitter = () => {
    const text = `Check out this analogy: ${generatedAnalogy} - Generated by the AI Analogy Generator! ðŸ§©`;
    const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
    window.open(url, '_blank');
  };

  const shareToLinkedIn = () => {
    const url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(window.location.href)}`;
    window.open(url, '_blank');
  };

  const sendEmail = () => {
    if (!email.trim()) {
      toast.error('Please enter your email address!');
      return;
    }
    
    if (!generatedAnalogy) {
      toast.error('Generate an analogy first!');
      return;
    }

    // Simulate email sending
    toast.success('Analogy sent to your email! ðŸ“§');
    setEmail('');
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Subtle Background Pattern */}
      <div className="absolute inset-0 opacity-5">
        {[...Array(20)].map((_, i) => (
          <div
            key={i}
            className="absolute text-xs opacity-50"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 5}s`,
            }}
          >
            âœ¦
          </div>
        ))}
      </div>

      {/* Main Content */}
      <div className="relative z-10 container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8 animate-fade-in">
          <img 
            src={arcadeLogo} 
            alt="Analogy Generator" 
            className="mx-auto mb-6 rounded-lg subtle-border max-w-md"
          />
          <h1 className="text-4xl md:text-6xl font-pixel subtle-text-glow mb-4">
            ðŸ§© What's the Analogy?
          </h1>
          <p className="text-lg md:text-xl font-orbitron text-muted-foreground">
            Generate clever analogies with AI
          </p>
        </div>

        {/* Input Form */}
        <Card className="max-w-2xl mx-auto subtle-border bg-card/95 backdrop-blur-sm mb-8 animate-fade-in">
          <div className="p-6 md:p-8">
            <div className="space-y-6">
              {/* Thing 1 Input */}
              <div className="space-y-2">
                <label className="text-sm font-pixel text-neon-cyan">
                  THING 1
                </label>
                <Input
                  value={thing1}
                  onChange={(e) => setThing1(e.target.value)}
                  placeholder="Enter first concept..."
                  className="subtle-border bg-input text-input-foreground placeholder:text-muted-foreground font-orbitron text-lg p-4"
                />
              </div>

              {/* VS Divider */}
              <div className="text-center">
                <div className="inline-flex items-center justify-center px-4 py-2 bg-secondary subtle-border rounded">
                  <Zap className="text-neon-yellow mr-2 h-4 w-4" />
                  <span className="font-pixel text-secondary-foreground text-sm">VS</span>
                  <Zap className="text-neon-yellow ml-2 h-4 w-4" />
                </div>
              </div>

              {/* Thing 2 Input */}
              <div className="space-y-2">
                <label className="text-sm font-pixel text-neon-pink">
                  THING 2
                </label>
                <Input
                  value={thing2}
                  onChange={(e) => setThing2(e.target.value)}
                  placeholder="Enter second concept..."
                  className="subtle-border bg-input text-input-foreground placeholder:text-muted-foreground font-orbitron text-lg p-4"
                />
              </div>

              {/* Generate Button */}
              <Button
                onClick={handleGenerate}
                disabled={isGenerating}
                className="w-full retro-button font-pixel text-lg py-6 relative"
              >
                {isGenerating ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="animate-spin rounded-full h-5 w-5 border-2 border-primary-foreground border-t-transparent"></div>
                    <span>GENERATING...</span>
                  </div>
                ) : (
                  <div className="flex items-center justify-center space-x-2">
                    <Sparkles className="h-5 w-5" />
                    <span>GENERATE ANALOGY</span>
                    <Sparkles className="h-5 w-5" />
                  </div>
                )}
              </Button>
            </div>
          </div>
        </Card>

        {/* Generated Analogy Display */}
        {generatedAnalogy && (
          <Card className="max-w-4xl mx-auto subtle-border bg-card/95 backdrop-blur-sm animate-glow-pulse mb-8">
            <div className="p-6 md:p-8">
              <div className="text-center mb-4">
                <h3 className="font-pixel text-neon-green text-base mb-2">
                  âš¡ ANALOGY GENERATED âš¡
                </h3>
              </div>
              <div className="bg-muted/50 subtle-border p-6 rounded-lg">
                <p className="font-orbitron text-lg leading-relaxed text-center">
                  {generatedAnalogy}
                </p>
              </div>
              
              {/* Share Buttons */}
              <div className="flex flex-wrap justify-center gap-4 mt-6">
                <Button
                  onClick={shareToTwitter}
                  variant="outline"
                  className="subtle-border hover:subtle-glow hover:bg-neon-cyan/10 transition-all"
                >
                  <Twitter className="h-4 w-4 mr-2" />
                  <span className="font-pixel text-xs">TWEET</span>
                </Button>
                <Button
                  onClick={shareToLinkedIn}
                  variant="outline"
                  className="subtle-border hover:subtle-glow hover:bg-neon-purple/10 transition-all"
                >
                  <Linkedin className="h-4 w-4 mr-2" />
                  <span className="font-pixel text-xs">SHARE</span>
                </Button>
              </div>
            </div>
          </Card>
        )}

        {/* Email Sharing */}
        {generatedAnalogy && (
          <Card className="max-w-md mx-auto subtle-border bg-card/95 backdrop-blur-sm">
            <div className="p-6">
              <h4 className="font-pixel text-neon-orange text-center mb-4 text-sm">
                ðŸ“§ EMAIL RESULT
              </h4>
              <div className="flex space-x-2">
                <Input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="your@email.com"
                  className="subtle-border bg-input text-input-foreground font-orbitron"
                />
                <Button
                  onClick={sendEmail}
                  className="retro-button font-pixel px-6 text-sm"
                >
                  SEND
                </Button>
              </div>
            </div>
          </Card>
        )}
      </div>

      {/* Footer */}
      <div className="relative z-10 text-center py-8 mt-16">
        <p className="font-pixel text-xs text-muted-foreground opacity-60">
          ðŸŽ® POWERED BY AI ðŸŽ®
        </p>
      </div>
    </div>
  );
};

export default AnalogyGenerator;